main_folder = r"\\solon.prd\files\P\Global\Users\C63954\UserData\Desktop\Work_fromARG_Covid\RL"  file_retu=main_folder+"Anom_Trend_CPD.xlsx"excel_pca="PCs_diff_timeframes.xlsx"import osos.chdir(main_folder)from RL_PCA_Par_Func import *lag_pca,days_fut,div_set,years_opt,targets=[50,100],100,60,['1991-04-15','1984-01-13','2022-11-02'],[100,200,150]year,ann,anos,idx=years_opt[0],math.sqrt(252),30,0#selected_ret=['MXEF Index', 'BCOMPR Index', 'BCOMSO Index', 'BCOMIN Index', 'BCOMGR Index','RLG Index', 'RLV Index', 'LG30TRUU Index','SPX Index', 'DXY Curncy','LUATTRUU Index','BCOMEN Index'] # 'CCMP Index','BCOM Index','SML Index','EMUSTRUU Index'selected_ret=['LG30TRUU Index','SPX Index','LUATTRUU Index']# Preparing DataSetiteration,target,validating,q_sel=3,targets[1],'Yes',60df=read_excel(excel_pca,"Sheet1",h=0).set_index('Dates').sort_index().rolling(days_fut).mean()pc_col=colu(df)ret=read_excel(file_retu,"Prices",h=1).set_index('Dates').sort_index().drop_duplicates()ret=ret[ret.index > dateutil.parser.parse(year)][[c for c in colu(ret) if c in selected_ret]]null_c = null_col_f(ret,0)ret.drop(null_c,axis=1,inplace=True)ret_col=colu(ret)final=pd.concat([df,ret], axis=1).dropna().drop_duplicates()final[[c+'_d_'+str(days_fut) for c in pc_col]]=final[pc_col].diff(days_fut)final[[c+'_d_of_d' for c in pc_col]]=final[[c for c in colu(final) if '_d_' in c]].diff(days_fut)#plot_veloc_acceler(final,7000,8200,3)for lag in lag_pca:    final[[c+'_lag_'+str(lag) for c in pc_col]] = final[pc_col].shift(lag)fcst_w=final[ret_col].pct_change(periods=1).shift(-1)final[ret_col] = (final[ret_col].pct_change(periods=target).shift(-target)+1)**(1/target)-1targ_col_plain = [c.replace(' Index','') for c in ret_col]null_not_targ = null_rows(final[[c for c in colu(final) if c not in ret_col]]).indexfinal.drop(null_not_targ,inplace=True)if validating=='No':        fcst=final.iloc[-target:,:]    final=final.iloc[:-target,:]    spl_df,ts = len(final), int(1_000_000/1)else:    fcst = null_rows(final)    final.dropna(inplace=True)    final,idxs_ts=change_order_df(final,q_sel,div_set)    spl_df,ts = len(final)-len(idxs_ts), int(1_000_000/1)    fcst_w=fcst_w.loc[idxs_ts,:]# Trainx=np.round(final.drop(ret_col,axis=1).astype('float32').to_numpy(),4)y=np.round(final[ret_col].astype('float32').to_numpy(),4) l_rew,l_act,l_tar,l_i,l_obs,l_act_n,l_ben = [],[],[],[],[],[],[]env_tr=Assets(x[:spl_df],y[:spl_df],l_rew,l_act,l_tar,l_i,l_obs,l_act_n,l_ben,idx)model = A2C("MlpPolicy",env_tr, verbose=1)env_tr.reset()print_text('Begin Learning')model.learn(total_timesteps=ts,reset_num_timesteps=False)print_text('Finished Learning')# Test Setl_rew,l_act,l_tar,l_i,l_obs,l_act_n,l_ben = [],[],[],[],[],[],[] env_ts=Assets(x[spl_df:],y[spl_df:],l_rew,l_act,l_tar,l_i,l_obs,l_act_n,l_ben,idx)env_ts.reset()rew,ep_len = evaluate_policy(model,env_ts,n_eval_episodes=1,return_episode_rewards=True)print_text('The_End_Of_Test')# Resultsdaily_rew=(fcst_w.values * pd.DataFrame(env_ts.l_act_n, index=idxs_ts,columns=targ_col_plain).fillna(0).values).sum(axis=1)#df_gr_ts=make_df_gr(daily_rew,fcst_w[ret_col[idx]],env_ts.l_act_n,targ_col_plain,idxs_ts)multi = fcst_w[ret_col[0]]*0.55+fcst_w[ret_col[1]]*0.25+fcst_w[ret_col[2]]*0.1df_gr_ts=make_df_gr(daily_rew,multi,env_ts.l_act_n,targ_col_plain,idxs_ts)#tit ='TEST_FR_'+str(idxs_ts[0])[2:7]+'_TO_'+str(idxs_ts[-1])[2:7]+'\t\tIR:'+str(IR(df_gr_ts,'Rew','Bench',len(df_gr_ts),ann))tit ='FROM_'+str(idxs_ts[0])[2:7]+'_TO_'+str(idxs_ts[-1])[2:7]+'_vs_Bench_Port'#corr = round(df_gr_ts['Bench'].corr(df_gr_ts[targ_col_plain[idx]]),1)#plot_return(df_gr_ts,['Rew_Cum','Bench_Cum'],tit+'\t\tCorr(w&b):'+str(corr))plot_return(df_gr_ts,['Rew_Cum','Bench_Cum'],tit)#+'\t\tCorr(w&b):'+str(corr))#df_gr_ts=make_df_gr(env_ts.l_rew,env_ts.l_ben,env_ts.l_act_n,targ_col_plain,idxs_ts)#multi = np.sum(y[spl_df:]*np.array([0.55,0.25,0.1]),axis=1)#df_gr_ts=make_df_gr(env_ts.l_rew,multi,env_ts.l_act_n,targ_col_plain,idxs_ts)#tit ='TEST_FR_'+str(idxs_ts[0])[2:7]+'_TO_'+str(idxs_ts[-1])[2:7]+'\t\tIR:'+str(IR(df_gr_ts,'Rew','Bench',len(df_gr_ts),ann))#corr = round(df_gr_ts['Bench'].corr(df_gr_ts[targ_col_plain[idx]]),1)#plot_return(df_gr_ts,['Rew_Cum','Bench_Cum'],tit)#+'\t\tCorr(w&b):'+str(corr))weights_plot_divided(df_gr_ts,targ_col_plain)print('IR vs Ben_Port {}'.format(IR(df_gr_ts,'Rew','Bench',len(df_gr_ts),ann)))# Save to Docsave_to_doc()# Results vs SPXmulti = fcst_w[ret_col[0]]*1df_gr_ts=make_df_gr(daily_rew,multi,env_ts.l_act_n,targ_col_plain,idxs_ts)tit ='FROM_'+str(idxs_ts[0])[2:7]+'_TO_'+str(idxs_ts[-1])[2:7]+'_vs_SPX'plot_return(df_gr_ts,['Rew_Cum','Bench_Cum'],tit)#+'\t\tCorr(w&b):'+str(corr))print('IR vs SPX {}'.format(IR(df_gr_ts,'Rew','Bench',len(df_gr_ts),ann)))"""IRs(Daily_Eq_HY_Tr_vsEqFI_200_2,30,1,'\nDAILY')IRs(Target_Eq_HY_Tr_vsEqFI_200_2,30,1,'\nTARGET')df_wei=pd.Series(env_ts.l_act_n).fillna(0)daily_rew=(fcst_w['BCOMEN Index'].values * df_wei.values).tolist()df_gr_ts=make_df_gr(daily_rew,fcst_w[ret_col[idx]],env_ts.l_act_n,[targ_col_plain[0]],idxs_ts)tit ='TEST_FR_'+str(idxs_ts[0])[2:7]+'_TO_'+str(idxs_ts[-1])[2:7]+'\t\tIR:'+str(IR(df_gr_ts,'Rew','Bench',len(df_gr_ts),ann))plot_return(df_gr_ts,['Rew_Cum','Bench_Cum'],tit)df_gr_ts=make_df_gr(env_ts.l_rew,env_ts.l_ben,env_ts.l_act_n,[targ_col_plain[0]],idxs_ts)tit ='TEST_FR_'+str(idxs_ts[0])[2:7]+'_TO_'+str(idxs_ts[-1])[2:7]+'\t\tIR:'+str(IR(df_gr_ts,'Rew','Bench',len(df_gr_ts),ann))plot_return(df_gr_ts,['Rew_Cum','Bench_Cum'],tit)plt.hist(fcst_w['BCOMEN Index'],bins=60)plt.title('fcst_w_Oil')weights_plot_divided(df_gr_ts,targ_col_plain)"""# Current FCSTret_now=fcst_w.loc[fcst.index,:]xf=np.round(fcst.drop(ret_col,axis=1).astype('float32').to_numpy(),4)yf=np.round(fcst[ret_col].astype('float32').fillna(0).to_numpy(),4) l_rew,l_act,l_tar,l_i,l_obs,l_act_n,l_ben = [],[],[],[],[],[],[] env_f=Assets(xf,yf,l_rew,l_act,l_tar,l_i,l_obs,l_act_n,l_ben,idx)env_f.reset()rew, ep_len = evaluate_policy(model, env_f, n_eval_episodes=1, return_episode_rewards=True)print_text('Current Fcst')fcst_rew=(ret_now.values * pd.DataFrame(env_f.l_act_n, index=fcst.index,columns=targ_col_plain).fillna(0).values).sum(axis=1)#fcst_w=make_df_gr(fcst_rew,ret_now[ret_col[idx]],env_f.l_act_n,targ_col_plain,fcst.index)multi = ret_now[ret_col[0]]*0.55+ret_now[ret_col[1]]*0.25+ret_now[ret_col[2]]*0.1fcst_w=make_df_gr(fcst_rew,multi,env_f.l_act_n,targ_col_plain,fcst.index)#fcst_w['Bench_2']=ret_now[ret_col[idx-1]]#fcst_w['Bench_2_Cum']=(fcst_w['Bench_2']+1).cumprod()fcst_w=fcst_w.iloc[:-1,:]plot_return(fcst_w,['Rew_Cum','Bench_Cum'],'Live vs Bench_1. IR: '+str(IR(fcst_w,'Rew','Bench',len(fcst_w),ann)))#plot_return(fcst_w,['Rew_Cum','Bench_2_Cum'],'Live vs Bench_2. IR: '+str(IR(fcst_w,'Rew','Bench_2',len(fcst_w),ann)))weights_plot_divided(fcst_w,targ_col_plain)# Save Picklename_pickle='It_'+str(iteration)+'_Tg_'+str(target)fcst_w.columns=[c+'_'+str(iteration)+'_'+str(target) for c in colu(fcst_w)]save_pickle(fcst_w,name_pickle+'.pickle',path=main_folder+'\\')# Live Performance: from FCSTs of Different Iterations & Targetsall_w=pd.DataFrame()for it in range(1,4):    for t in [50,100,200]:        loaded_df = read_pickle('It_'+str(it)+'_Tg_'+str(t)+'.pickle',path=main_folder+'\\').iloc[:,4:]        print('Iteration {} Target {}'.format(it,t))        print('Shape {} Null_Val {}'.format(loaded_df.shape,null_rows(loaded_df).shape))        all_w=pd.concat([all_w,loaded_df],axis=1).dropna()      all_w_avg=pd.DataFrame()for i in targ_col_plain:    col_avg = [c for c in colu(all_w) if i in c]    all_w_avg[i]=all_w[col_avg].mean(axis=1)all_w_avg=all_w_avg.div(all_w_avg.abs().sum(axis=1),axis=0)ret_now=ret_now.iloc[:-1,:]all_w_avg['Rew']=(ret_now.values * all_w_avg.values).sum(axis=1)all_w_avg['Bench']=ret_now[ret_col[idx]]#all_w_avg['Bench_2']=ret_now[ret_col[idx-1]]all_w_avg['Rew_Cum'] = (1+all_w_avg['Rew']).cumprod()all_w_avg['Bench_Cum'] = (1+all_w_avg['Bench']).cumprod()#all_w_avg['Bench_2_Cum'] = (1+all_w_avg['Bench_2']).cumprod()plot_return(all_w_avg,['Rew_Cum','Bench_Cum'],'Live vs Bench_1. IR: '+str(IR(all_w_avg,'Rew','Bench',len(all_w_avg),ann)))#plot_return(all_w_avg,['Rew_Cum','Bench_2_Cum'],'Live vs Bench_2. IR: '+str(IR(all_w_avg,'Rew','Bench_2',len(all_w_avg),ann)))weights_plot_divided(all_w_avg,targ_col_plain)print('\nBiggest Allocation as of today\n',round(all_w_avg.iloc[-1,:-4].sort_values(),2))""" # TEST of RESULTS alreadyDivers_150_1m=[-7.3,6.5,5,-25.4,14.4,3.2,-26.9,-3.6,18,26.9,-6.5,14.1,1.3,-16,-0.2,5.1,11.7,17,9.9,-18.6,5.1,-3.3,2.1,2.6,-9.6,14.6,7.9,49.1,5.3,4.3,12,10.9,-10.3,-8.3,-0.9,8.2,-1.6,-1.1,3,23.3]Divers_150_333k=[-0.8,-15.3,8.6,-6.5,18.6,-1.8,6.5,5.5,-21.1,4.8,19.1,7.7,-14.7,-8.7,-1.7,15.5,5.8,7.6,-4.6,-33.6,-13.9,13.8,-0.4,6.8,-0.1,-18.1,14.5,1.5,-14.4,-5.1,7,0,0.4,0.3,-1.3,17.8,-68.8,16.4,40.5,6.5]Divers_150_666k=[29.7,5.5,-5.4,7.5,-18.8,11.7,-3.2,3.8,4.3,14.7,-30.5,8.6,-8.1,-14.2,14.9,12.9,1.4,-3.1,-6.5,4.9,-8.9,9.5,-5.4,2.4,-7.2,1.6,-6.7,8.8,9.4,-0.4,-1.3,4.1,5.6,1.2,5.5,-1.3,18.5,-44.7,14.7,54.7]Divers_150_1m_60val=[-0.1,3.2,-5.6,-6.5,-15.6,14.7,13.1,6.9,7.6,49.8,-11.3,7.1,-13.7,6.5,-29.2,0.1,15.6,35.8,34.8,-7.8,-28.8,-15.6,15.5,-12,-36.6,3.1,7.4,70.2,6.7,55.2,11.3,6.7,9.5,0,-15.1,25.3,16.8,11.5,6.2,7.1,14.2,-11.3,-10,2.5,0.5,22,20,-1.1,16.7,6,0,-5.9,-11.8,10.4,-15.7,-1.1,0,-6,-11.9,43.5]Divers_66_Funda_1m_60val=[-4.8,-4.6,11,0.7,-6.3,2.1,10.1,14.1,17.6,-13.4,8.4,6.8,-8.1,30.7,8.4,-2.5,3.1,-9.3,0,0.8,-1.7,12.2,-15.1,15.5,0.4,-9.2,-15.9,23.1,-1.3,-15.4,-25.2,-5.5,-2.7,-11.5,17.7,9.3,4.7,6.2,-30.9,4.3,2.3,-20.9,3.8,25.9,10.8,11,2.5,-8,2.3,14.9,19.5,11.6,-1,-1.6,6.6,22.3,9.7,-15.2,23,-5.6]Divers_100_Funda_1m_60val=[30,0.8,63.3,3.4,12.8,0,17.9,40.4,9.1,25,15.5,11.6,-3.3,-4.1,8.7,-6.1,-2.6,-13.2,-2.5,-12.7,-5.2,5.3,13.9,8.6,22.3,24.1,-5.1,0,-22.5,7.9,5.7,0.3,2.2,0.6,-5.5,-13.4,-11.8,12,11.8,-9.5,-17.7,30.1,7.5,12.2,4.4,6.3,26.3,6.4,-1.5,6.2,-8.6,-2.5,-9.9,21.3,21.1,1.6,-3.8,13.2,35.9,25,]Divers_150_Funda_1m_60val=[12.8,9.1,10.4,19.9,4.3,-2.7,8.2,-8.3,11,23.4,0.4,16.5,7.8,-0.1,-3.8,11.5,16.8,-9.5,3.8,43.5,2.4,16.8,-21.6,0,6.2,18,12.3,-15.5,8.1,5.5,-20.5,1.5,0.6,67.7,23.4,15,14.2,-2.8,6,-0.2,13.8,50.2,48.3,6.5,35.5,6.4,19.3,17.2,29.5,3.7,-10.7,-6.3,13.4,-29.4,-0.9,37.5,17.7,-17,-5.3,24.5]Divers_200_Funda_1m_60val=[-9.8,15.8,71.9,57.2,6.7,10.4,33.7,29.8,5.9,-8.8,18.1,-20.7,13.2,44.7,33.7,5.8,-9.3,-12.2,-9.9,-17.9,17.7,69.7,3.5,60.5,0,8,11.5,8.1,4.7,19.7,17.1,-6.3,-7.4,7.7,10.8,5.8,45.2,18.8,-19.2,7.2,32,-0.6,-2.2,30.5,9.7,12.8,32.3,18.7,8.9,-15.7,37.1,3.4,77.7,-12.9,-3.4,58.5,16.5,-11.9,-0.9,9.6]Daily_200_Funda_1m_60val=[1.9,0.8,0.8,1.4,-3.5,3.5,-0.6,1.7,2.6,4,2,-1.3,0.4,-0.1,1.4,-0.4,-0.7,-0.4,-2.8,2.1,-3.5,1.7,1,-0.6,2.9,-2,1.7,1.7,0.1,0.7,-1.1,0.1,-2.8,1.1,1.5,-4.1]Daily_100_Funda_1m_60val=[1.6,0.9,-0.9,-1,1.2,-1.8,0.6,-2.6,-0.8,-0.6,-0.1,0.1,1.3,0.6,0.9,1.3,1,-1.8,2.3,1.8,-2.6,-1.8,1.7,1.7,-0.7,3,1,-0.2,-0.5,1.2,0.3,-1,1.2,-1.4,2.1,2.5]Daily_150_Funda_1m_60val=[2.1,-0.3,-2.6,2.5,0.2,0.8,0,-4.2,1,0.8,0.9,-1.6,-0.1,-0.2,1.5,0.1,-0.2,-0.1,-0.5,-1.6,1.9,-1.7,1.2,0.9,1.3,0.7,1.9,-0.5,1.3,-1.4,1,2.4,0.2,0.7,2.3,-0.9]Daily_20_STRet_NewRewFunct=[-3.2,-2.2,-1.6,1,0.7,-0.6,-2.6,-0.6,-1.3,0.9,0.2,-0.1,0.6,1.6,-1.7,0.2,-0.6,-0.3,-3,0.2]Target_20_STRet_NewRewFunct=[-11.9,-8,-9.4,4.4,5.7,1,-1.4,-0.6,0.3,-9.3,-12.9,3.8,3.6,-3,9.5,1.1,-3.1,-2.6,-17.4,1.5]Daily_300_STRet_NewRewFunct=[-1.7,-2.3,0.2,1.2,-0.5,2.6,-3.7,1.8,-0.2,-1.8,-0.9,-2.6,2.5,-1.9,1.2,0.3,-2.1,-4.1,0.8,0.3,0.2,-0.5,-1.1,-0.8,-0.1,1.1,1.9,-0.7,0.4,0.8,-0.5,0.3,1.7,0.6,-0.2,1.1,-0.1,1.9,-0.1,0]Target_300_STRet_NewRewFunct=[-15.9,3.4,2.4,-19.3,5.8,14.6,17.5,-11.4,-15.8,-19.6,-16.4,-34,-9.1,3.6,8.1,-2.7,25,4,12.5,-14.7,26.1,41.7,25.7,-2.9,23.5,47.4,13.1,-10.8,-5.7,43.3,84.2,4.4,23.4,22,-7.4,73.6,44.8,-10.5,48.5,37]Daily_150_STRet_NewRewFunct=[1.4,0.1,2.2,0.3,0.2,0.1,-0.6,0.5,-1.1,0.9,-1.1,-1.7,-1.6,2.2,-0.4,-1.4,-1,1.5,-1,-0.5,-0.1,0.4,2.9,1.3,1.6,1.7,-1.4,1.4,1.1,-2.7,-1.4,-1.9,-0.7,0,-0.3,-1.7,0.1,1.2,1.1,0.7,0.6,-1.6,1,0.1,2.5,0.9,-0.4,-0.5,0.8,-1.2,2.1,-0.8,0.4,-1.2,0.8,-0.2,0,-1.5,1.5,-0.3]Target_150_STRet_NewRewFunct=[32.8,3.7,27.8,37.5,13.3,29.3,-6.7,15.6,27.5,-6.2,0,10.5,-3.4,8.1,-1.2,-11.3,2.4,-18.7,11.4,-17.8,-11.6,-19.5,4.4,32.4,7.1,2.8,14.9,-2.3,-8.6,-7.5,39.8,-1.3,3.2,6.2,-15.1,27.2,23.6,28.4,13.9,19.7,3.6,9.9,45.6,2.5,17.1,16.5,-13.2,-4.4,12.1,8.1,55.8,2.5,-13.6,12.4,45.7,-12,0,-10,10.6,37.5]Daily_50_STRet_NewRewFunct=[-0.2,0.3,-0.1,-2,0.1,0.1,1.6,-1.9,-0.9,-2.7,-3.7,0.7,-0.2,-0.5,0.6,0,-0.4,2.2,0.3,-0.2,0.3,0.2,-1.5,3.2,1.1,1.4,1.9,-0.3,-1,-0.5,0.7,-2.1,2.9,-0.8,-0.4,0.2,0.5,-0.9,1,2]Target_50_STRet_NewRewFunct=[-3.2,-4.8,-12.4,24.8,3.2,14.4,8.8,8,6,2.7,-6.5,-12.8,-3.5,-7.6,7.3,-9.2,-6.5,1.1,7,-3.5,-3.6,11.7,-1.8,46.1,8.3,16.4,9.4,3.5,-24.5,28.8,-1.1,-5.3,4.2,5.5,-1.3,-5.6,4,4.7,21.3,-13.1]Daily_200_STRet_NewRewFunct=[1,-1.3,0.1,1.4,2.1,0.2,2.3,3.9,0.1,2,1.1,-0.8,-0.8,-2.2,0.9,0,-1.8,-0.2,0,-3.2,-1.3,-1.2,3.3,2.1,-1.5,1.5,1.3,2.6,-1.7,-0.1,2.2,-0.7,-1.7,-0.5,2.5,-0.4,0.4,2,-1.5,0.7,-1.9,-1.5,-3.7,-1.2,1,2.4,-0.1,1.5,1.5,0.6,0.8,0.9,-0.9,1,-2.1,1.3,0.9,0,-1.5,0.9]Target_200_STRet_NewRewFunct=[-1.4,22.2,55.7,49,5.3,-5,23.8,25.3,-7.9,29.6,53.5,31.3,-8.7,9.4,-16.6,11.2,28.8,0,7.9,-19.4,-27.3,45.6,25.5,13.7,18.2,20.1,16.4,-9.7,-22.9,-0.9,5.4,4.3,-1.4,34.8,23.8,17.9,9.5,-8.7,0.4,17.8,20.8,-45,-17.6,-4.1,22.7,32.1,11.7,-1.7,-0.7,-9.7,-10.4,17.7,31,8.5,31.5,41.3,7,61.9,0,-8.8]Daily_100_STRet_NewRewFunct=[1.9,-1.4,1,1.8,-0.9,1.9,0.5,-1,0.5,0.9,-2.2,0.4,1.2,1,-0.8,0.4,0.5,-0.2,-1.1,-1.6,-1.2,-0.4,-1.3,-1.4,0.7,-0.9,-2.2,2.8,1.1,0.1,-1,-3,1.2,0.4,1.7,-0.6,0.6,2.1,1,-0.7,0.3,0.5,1.1,0,-1.1,-0.4,3.8,2.3,-0.7,0.8,1.2,1.7,3.2,-1.4,-0.6,-1.9,1.1,0.3,1.6]Target_100_STRet_NewRewFunct=[12.4,23.6,4.3,-20,1.6,13.6,0.1,-21.1,18.3,-0.8,44.8,21,19.4,2.1,6.7,2.9,-13.7,3,9.1,-4.4,-16.7,-26.2,-4,-9.9,-4.7,25.1,12.8,16,-14.9,23.9,-0.6,-6.8,15.2,-4.4,1.7,-14.2,-7.7,3,10.2,6.8,-3.1,-2.9,4.7,65.6,4.4,58.2,21.1,-3.9,30.7,-19.4,7.9,11.8,11.8,32.9,3.1,-5.1,11.8,17.7,-3.1,15.7]Daily_50_ret3PCs_5TargUPtoMXEF=[-1.3,3,1.3,0.8,-0.2,-4,3.7,-2.6,1.5,1.1,-0.3,-0.2,0.5,1.9,-0.1,1.9,0.9,-2.7,-0.2,-0.2]Target_50_ret3PCs_5TargUPtoMXEF=[28.4,-18.5,7.7,5.7,21.1,-9.1,10.2,-30.8,7.7,13.4,0.6,-3.5,-4.4,13,3,12.7,20.1,8.2,-8.9,-0.8]Daily_50_ret4PCs_4MainTarg=[0,-3,-1.2,0.5,-0.5,0,0.4,-1.3,1.1,-2.1,0,-0.1,0.5,-3.3,0,0.5,1.3,2.7,0.2,-1.7]Target_50_ret4PCs_4MainTarg=[0,-20.7,-9.4,3.1,0,-0.9,-10.2,-4,5.4,0,8.7,-7.5,6.7,0,48.4,-14.6,0,5.7,4.5,-10.3]Daily_50_ret4PCs_4MainTarg_3PCf=[0,-0.8,-2.3,0.5,-0.9,-1.7,0.4,-0.5,0,2.7,2.6,1.6,-0.4,-0.1,-0.1,-1.8,0,-0.5,0.5,-1.4]Target_50_ret4PCs_4MainTarg_3PCf=[0,-8.7,-13.5,3.1,-12.7,-3.1,-14.4,-2.9,11.8,17.5,8.7,0,0,5.5,1.3,-9.7,-10.3,-2.1,-3.7,-5.5]Daily_50_ret3PCs_OilInsteadBCOM_3PCf=[-1.6,-1.7,-0.8,0.2,1.7,1,-1.6,-3.6,1.3,-2.5,2.5,1.1,-1.7,0.2,1.4,1.8,1.7,-0.1,-1.4,0]Target_50_ret3PCs_OilInsteadBCOM_3PCf=[-17.3,-12.9,-19.9,4.1,13.1,19.1,-2.2,-17.6,14.8,-3.7,21.7,7.3,0.2,3.7,8.1,18.4,-1.5,0.6,-12.8,10.3]Daily_200_SLTRet_ComPx_vsSPX=[-1.3,1,2,-2.8,0.9,-1.3,2.1,0.6,-0.6,1.7,0.6,-0.7,0.3,-0.5,-1,1,2.4,-1,0.8,2.1,-1.7,0.5,1.8,1.6,-0.4,-1.6,2.4,1.1,-2.2,0.6,1.9,2.8,-0.3,-0.1,-1,-2,-0.9,2,-2.9,0,0.7,-3,0.6,0,0.5,2.4,-0.5,-1.2,-1.3,0.5,0.4,-1.4,1.8,2.4,-0.8,0,1.4,2.4,-2.7,1.1]Target_200_SLTRet_ComPx_vsSPX=[0.4,74.9,18.4,24.4,29.2,58.4,27.1,35.8,6,8.7,7,-5.4,-9.5,8.9,-1.7,12,-7.3,52.8,8.6,-10.4,12.6,57.3,5.4,34.8,13.1,-0.5,17.2,2.5,16.8,14.6,25.5,-3,7.6,-15.4,-17.3,9.6,-26.9,-22.5,11.9,4.2,25.9,39.6,23,4.7,3.9,41.6,21.3,-8,19.9,-17.6,17.4,36.5,55.9,22.2,16.9,15.1,31.9,75,75.4,6.8]Daily_50_SLTRet_ComPx_vsSPX=[-2.2,-2.2,0.8,2.1,2,0.1,2.7,1.4,-1,1.1,0.4,-0.2,-0.7,-0.6,-0.5,-0.3,-0.2,2.4,-1,-0.1,0.1,1.3,-0.3,-0.2,1.5,-2.1,-2.5,0,0.4,-0.7,0.4,-1.2,1.7,-1.4,-1.4,-0.9,1.9,1.9,2.3,-1.1,1.1,0.7,-0.8,2.3,0.8,-0.8,0.4,0.3,1,2.6,1.1,3.3,0.8,0.3,2.6,1,0.4,1.6,-0.8,0.4]Target_50_SLTRet_ComPx_vsSPX=[5,-8.7,1.2,15.5,-20.2,4.6,11.8,10.7,10.1,7.9,8,-11,-9.5,10.1,-9.5,-3,-57.6,-11.5,-0.1,-3.4,-8.3,-9.7,-4.6,11.8,5.7,11.8,11,-14.8,-2.9,3.8,-6.8,-1.2,-9,-3.5,-6.1,-3.8,-3.9,9.3,-5.5,7.6,-37,14.3,20.5,5.9,19.1,5.9,14.2,15.4,2,25.2,8.3,19.7,11.7,18.3,7.9,5.5,-1.6,3.1,15.9,12.4]Daily_100_SLTRet_ComPx_vsSPX=[-0.8,2.3,1.3,2.5,1.5,-0.4,1,0.8,0.3,1.8,-0.8,0.4,-0.2,0.4,0.6,-0.2,-0.5,-0.3,0.2,1.4,-0.4,-1.4,2.8,0.4,-2.4,-0.7,-0.4,1.1,2.3,-0.1,-0.4,0.9,0.5,0.5,1.1,-2.2,-0.1,-0.9,1.5,0.3,1.6,2.5,1.8,1,1.8,1.6,1,2.7,1.2,-0.2,-0.9,-1.8,-0.8,1.5,0.2,1.3,0.3,1.6,-0.9,-1.4]Target_100_SLTRet_ComPx_vsSPX=[25.2,44,53,7.2,-14.4,18.7,4,10,12,3.7,7.2,30.6,10.2,0,2.3,-12.5,-5.2,-9.4,-7,-5,-9.5,-4.2,36,-12,3.3,-22.8,-15.5,21.5,7,-5.9,4.2,10,10,7.9,-7.4,-8.4,25.3,-2.8,18.4,1,1.8,4,24.3,18.8,0,-5.9,28.6,7.2,3.6,-14.5,8.4,3.3,-17.2,21.4,20.3,15.3,2.2,28.4,7.9,0.1]Daily_50_5RPCs4FPCs_manyTargets_again=[-0.3,-0.1,1.7,-1.3,-1.2,0.1,2.5,-0.3,1.3,2.4,0.1,0.1,1.3,-1.3,-0.9,1.7,-2.7,-1,-2.2,-2.4]Target_50_5RPCs4FPCs_manyTargets_again=[5.8,-9,6.7,-3.4,-13.8,3.3,1.7,23.5,-0.2,19,-0.6,23.6,-2.4,-24.6,-0.9,13.1,-18.2,-17.9,4.7,-17.9]Daily_50_as_always_4RPCs3FPCs_multTargets=[0.8,0.7,1.3,1,1.5,-2.4,-2,-0.3,-1.4,-3,-0.5,-0.6,1,-2,1.8,-1.4,-2.1,-0.2,-1.5,-2.1]Target_50_as_always_4RPCs3FPCs_multTargets=[-8,2.6,-0.4,12.7,-1.9,-14.5,8.4,20.7,3.5,-32.8,0,12.1,-3.1,-16,-18.6,-6.5,-5.3,-1.9,-2.8,21.8]Daily_50_as_always_but_changed_LAG_PCA=[-1.2,-2.3,-0.8,0.9,-2.1,1,0.9,1.5,-2,-2.4,1.9,1.5,0.4,-3,-1.5,0.5,1.2,-2.6,0.3,0.1]Target_50_as_always_but_changed_LAG_PCA=[-7.3,-13.5,-12.6,7.1,-21.6,13.5,-11,7.6,-1.5,2.3,13.9,5.7,9.6,8.3,7.7,-11.6,17.3,-7,3.1,-2.7]Daily_50_shorterLAGshorterVelAcc=[-1.1,1.2,-0.7,1.3,-0.6,0.4,-1.2,-0.5,0.3,-0.7,2,0.3,-1.1,0,-1.2,-0.2,-0.1,-1.3,0.4,-1.8]Target_50_shorterLAGshorterVelAcc=[-21.5,9.1,-21.3,-7.3,-2.1,-2.5,1.3,7.4,3.5,2.8,7.3,17,-9.7,2.6,1.1,1.1,-5.7,6.6,-1.4,-23.9]Daily_5_shorterLAGshorterVelAcc=[-2.8,-0.1,-0.2,-3.1,-1.4,-1.3,-0.7,-2.7,-0.3,-0.8]Target_5_shorterLAGshorterVelAcc=[-6.4,-1,-0.1,-8.1,-4.4,-3.1,-2.3,-5.7,-1,-2]Daily_100_shortLAGS_shorVelAcc=[1.9,1.3,0.9,-2,-1,1.9,2.1,-0.8,-0.8,-1.9,1.9,-0.8,0.6,-0.8,-0.1,-0.8,-2.5,-0.7,2.1,-2.3,1.5,0.4,1.4,3.5,1.8,1.5,0.5,1.4,0.5,1.6,-0.5,-1.8,1.7,-0.4,-1.8,2.7,-1.6,0.6,0.9,0.2,1.4,1.7,0.9,-0.5,-0.8,-0.8,-2,0.4,-1.2,1.5,0.4,1.3,3.1,-1.3,-2.6,-1.7,-2.2,-1.8,-1.3,0.6]Target_100_shortLAGS_shorVelAcc=[-4.3,-11.3,-2.5,10.4,24.5,2,-3.2,8.3,-0.4,-1.1,6.2,6.2,-5.2,-1.9,16,-15,1.1,-7.9,17.2,6.7,15.1,12,2.5,-17,-0.2,-6,-5,6.3,17.3,6.2,19.2,10.9,5.6,2.6,32.3,14.5,8.5,3.6,-17,-21.4,10.5,5.9,9.4,-17,-19.9,-8.5,30.3,13.4,1.6,15.9,47.4,42.4,-23.8,-18.3,-11.5,-7.5,-6.4,-9.3,5.9,5.7]Daily_150_shortLAGS_shorVelAcc=[-1.9,0.8,1.6,0,0,0.2,0.3,0.4,-1.6,0.2,-2.4,-0.4,-1.3,-0.3,0.6,-1.7,-0.3,0.5,1.7,1.2,0.8,0.3,1.3,3.2,1.6,0.6,-1.6,-0.1,-0.3,-0.9,-0.8,-1.7,2.4,-0.5,0,1.9,-0.7,-0.5,4.2,-1.8,0.2,-2.3,1.3,-0.6,2.9,-0.1,2.4,1.7,-2.4,1.6,0.3,-0.6,1.8,-0.1,-2.1,1.5,-2.1,1,-0.5,-0.7,]Target_150_shortLAGS_shorVelAcc=[-11.4,-16.9,9.3,13.8,2.2,23.3,-7.9,7.4,18.4,-35.6,4.2,3.5,31,-6,2.3,-8.2,25.5,12.9,-7.5,3.2,7.8,-7.2,-22.4,10.9,5.8,16.7,-16.6,6.9,2.5,-18.9,14.3,8,3.9,-16.6,8.5,-12.5,17.9,21.8,3.5,33.5,50.6,-63.6,-2.8,8.9,-8.2,31,35.2,14.3,1.5,28.7,58.1,38.5,-14.2,31.8,-1.7,16.3,-17.9,-7.8,-11.4,-10.9]Daily_200_shortLAGS_shorVelAcc=[1.1,1.1,0,2.3,1.6,1.1,-0.5,0.8,0.1,-1.5,0.3,-2.2,-1.1,1,-0.1,0.3,-1.8,1.9,0.7,-0.5,-0.6,-1.2,2.5,0.5,-0.7,3.6,-0.7,-1.5,-0.9,2,1.3,-0.2,-0.6,2.6,1.7,-1.2,1.6,1,2.6,1,1.6,-0.7,-0.6,-1.9,-1.4,-0.8,-0.1,-2,1.5,1.2,-1,-1.9,1.1,2,-2.8,-1.8,-3.2,0.5,0.2,-0.8]Target_200_shortLAGS_shorVelAcc=[13,-8.8,13.3,-3.4,15.7,25.1,18.5,-2.4,-6.9,-4.7,-3.4,4.7,30,-11.6,7,-2.5,-7.3,0.2,22.4,-6.1,-5,4.2,3.3,-8.6,-15.2,15.6,51.7,-38.1,13.4,-2.2,2.7,19.5,16.1,30.7,10.5,-29.7,31.1,19.1,10.7,3,13.3,-5.1,5.8,15.7,10.6,24.8,-40.2,2.1,37.9,27.7,34.9,20.1,-8,36.1,-20.2,-7.3,-29.8,56.4,-14.6,9]Daily_Oil_200_vs_SPX=[0.2,-2.3,-0.8,-0.1,3.1,-0.8,-3.1,3.2,1,0.5,0.4,-0.7,-1.1,-0.8,-0.7,-1.1,1.4,1.2,1.9,-2.5,-1.2,-0.3,-2.8,-1.4,-1,1.8,-1.9,0.2,-0.9,1.1,0.3,1.9,-2.3,0.5,-0.3,0.6,1.6,-0.7,-2,-0.4,-2.7,-0.8,2,3.7,-2.3,-0.4,-3.8,-1.5,0.3,-0.1,-1.6,1.3,0.2,0.4,-0.2,-1.2,-0.8,2.2,-0.6,-2.5]Target_Oil_200_vs_SPX=[-15.8,0.3,-43.5,9.1,23.2,41,-27.2,-21.3,-33.4,57.1,-12.4,43.5,-8.4,-0.7,-50.8,18.5,10,19.7,-22,-3.3,3.3,-2.4,70,-47,-19.9,37.9,-19.5,15.5,15.9,-12.9,9.1,8.7,-17.8,12.7,-19.8,17.4,43.4,-23.4,-2,-39.4,-11.7,-41.1,10.1,79.4,-46.5,30.8,-26.8,-10,-3.2,69.7,6.4,16.9,17.6,-64.2,-5,-31.4,-28.6,-36.7,43.7,5.8]Daily_Oil_200_vs_Oil=[0,0,1.9,-1.3,0.4,-0.5,0.6,0,4.9,0.7,0,0,1.1,2.5,-2.4,-0.5,0,-0.8,0.9,2.2,0.1,-2.2,-1.1,2.1,-1.4,0,0,-1,-0.8,0,-1.5,-0.5,-0.3,0,0,-1.7,0.8,1.1,1,-1.6,0,2.8,-2.6,0,0,1.4,0,1.6,0.4,1.1,0,0,0,2,1,0.1,0,-1.7,-4.1,0]Target_Oil_200_vs_Oil=[0,0,-10.7,8.1,-11.1,-7.9,0,11.6,0,2,107.6,0,21.8,0,8.3,-79.6,7.6,8.4,0,16.4,16.1,-18.3,30.6,-6.7,78.1,31.2,0,0,-39.1,-10.8,-1.3,-3,-32.2,0,0,8,60.3,2.7,9.4,8.6,0,49.7,0,11,0,14.5,0,7.8,-3.1,7.3,0,0,0,12,12,-4.3,0,-24.5,0,-8.6]Daily_Eq_HY_Tr_vsSPX_200=[0,-1.1,-0.3,-4.1,-3,0,-2.1,0,0,0,-0.1,-1.7,2.4,0,-2,-1.4,0,0,0,0,-0.2,2.4,-2,-0.2,-1.1,0,0,0.9,-1.7,-0.8,1.3,0,0,0,-1.2,1.2,1.7,-1,2,-0.6,1.2,-2.2,0.2,0,0.3,-0.3,0,0,0.1,-1,0,-1.1,1.1,0,-1.4,0,0.1,-0.9,1.9,1.5]Target_Eq_HY_Tr_vsSPX_200=[0,-15,-7.1,6.8,25.7,0,9.1,0,0,0,-7.6,-17.5,-19.1,7.7,0,0,4.7,0,0,-11.4,-5.4,13.1,0,0,-2,-26,0,4.3,-8.9,-8,-17,1.2,0,9.2,-0.5,0,-24.5,16.2,-6.1,0,8.6,22.9,-9.5,0,34.6,-12.2,-18.5,-1.7,47.2,0,-17.8,0,-9.3,0,-15,0,0.5,5.2,6.2,10.4]Daily_Eq_HY_Tr_vsEqFI_200=[1.3,-0.9,0,2.1,0.4,2.3,-0.4,-0.4,1.8,1.7,1.9,0.2,0.6,0,1.5,1.7,1.8,-2.5,-2.1,3.5,1.2,3.1,-0.5,0.3,-1.1,-1.6,1.1,1.8,0.1,0,-2.1,-0.9,1.9,-0.2,-1.3,0.7,-0.7,0.3,0.8,1.1,-1,0.9,1.8,1.1,1.2,0.2,2.3,-0.7,-0.2,0.2,2.6,1.9,-1.2,0.2,-4.3,1,2,1.2,-1.9,-0.9]Target_Eq_HY_Tr_vsEqFI_200=[-5.6,4.3,15.4,3.4,42.6,104.9,-22.4,15.3,16.5,4.4,40,4.9,-3.5,3.8,34.8,-21.7,-12.3,9.4,11.5,97.3,2.9,11.2,1,54.6,54.2,8.8,70,24.4,31,1.6,9.4,-10.8,2.1,-9.6,19.8,-5.9,7.5,34.7,35,1,28.8,9.5,24.7,14.3,25.3,33.9,66,22.7,-30.8,-43.1,73,0.2,-3.6,1.9,-10.3,112.7,68.4,27.8,-2.8,-8.8]Daily_Eq_HY_Tr_vsEqFI_200_2=[-0.9,1.2,-0.4,0.2,-1.1,0.7,2.6,-0.3,2.1,0,-0.4,2.1,1.8,0.8,1.2,1.8,0.8,2.4,-2,0.7,-1.2,2.2,-0.7,-1.1,2.4,0.4,0.9,-2.5,-0.5,-1.1,-2.8,2.6,0.3,1.5,1.5,0.2,-1.6,0.8,1.4,1.6,-0.7,-1,2.6,0.6,0.9,1.7,-0.8,2.1,0.8,2.8,0.1,-0.3,1.2,-1.1,1.6,-2,-2.6,2,1.2,-1.3]Target_Eq_HY_Tr_vsEqFI_200_2=[4.3,-4,16.4,15.4,17.5,42.6,-11.8,13.9,24.7,4.6,105,4.4,21.3,16.5,2.7,2.1,64,26,85.2,-8.1,2.2,-21.7,54.6,117,42.2,69.9,14.3,3.9,13,8.7,-12.2,-10.7,30,-1.1,-1.3,7,5.2,5.6,36,54.2,20.6,-14.8,22.3,11.9,73,38.5,52.1,33.1,66.2,-37.1,-7.2,-1.7,-0.6,-3.5,61.8,-19,-17,27.8,112.7,39.5]Daily_vs_Ben_Port_Thomas=[1.8,2.5,1.9,0.5,1.6,-1.7,0.2,1,2.3,1.8,-0.3,1.3,2.3,0.9,1,0.9,1,-2.1,2.3,1.2,1.7,0.1,0,-2.8,1,-1.4,1,0,-0.3,-0.7,0.8,-0.2,3.7,-0.5,0.3,0.5,-0.1,1.7,-3.7,2.4,-0.8,-1.6,2.7,2.1,1.6,-1.6,1.1,1.4,1.4,-1.2,-0.8,-1.7,0.4,-0.3,3.7,-0.1,-0.3,-1.8,-0.8,-0.3]Daily_vs_SPX_Thomas=[0,1.4,0.4,0,0,0,1.3,-2.3,1.5,-2,1.2,0,0,1.9,0,0,0,0,0,-0.1,0,-1.7,-0.6,0,-3,0.7,-0.3,-0.1,0.9,-0.8,-0.1,-0.2,0.5,0.3,2.2,-0.7,0.3,-0.4,0,1.7,-3.6,-0.1,-1.1,-0.7,0,-1.5,0,0,0,0,-2,-0.1,-1.4,0.8,0.3,-0.6,1.9,-0.4,2.8,0]# CODE: Testing on All Setfinal=final.sort_index()x = np.round(final.drop(ret_col,axis=1).astype('float32').to_numpy(),4)y = np.round(final[ret_col].astype('float32').to_numpy(),4) l_rew,l_act,l_tar,l_i,l_obs,l_act_n,l_ben = [],[],[],[],[],[],[] env_export=Assets(x,y,l_rew,l_act,l_tar,l_i,l_obs,l_act_n,l_ben,idx)env_export.reset()rew, ep_len = evaluate_policy(model, env_export, n_eval_episodes=1, return_episode_rewards=True)print_text('Finished Predicting on entire Df')idxs_all=final.indexdf_gr_all=make_df_gr(env_export.l_rew,env_export.l_ben,env_export.l_act_n,targ_col_plain,idxs_all) tasa_my,tasa_ben = ann_ret(df_gr_all['Rew_Cum'][-1],anos,1,4),ann_ret(df_gr_all['Bench_Cum'][-1],anos,1,4)plot_return(df_gr_all,['Rew_Cum','Bench_Cum'],'All Df: Ret_Port %{} vs Ret_Bench %{}'.format(round(tasa_my*100,2),round(tasa_ben*100,2)))pcs_all = 6quart= int(len(df_gr_all)/pcs_all)for i in range(pcs_all):    fr,to = int(i*quart),int((1+i)*quart)-1    df_temp=make_df_gr(env_export.l_rew[fr:to],env_export.l_ben[fr:to],env_export.l_act_n[fr:to],targ_col_plain,idxs_all[fr:to])    plot_return(df_temp,['Rew_Cum','Bench_Cum'],'From_'+str(idxs_all[fr])[:4]+'_till_'+str(idxs_all[to])[:4])#weights_plot_divided(df_gr_all,targ_col_plain)"""